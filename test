#!/usr/bin/env escript

main(["evo"])->
	Geno=genotype:create_NN({ffnn,sigmund,none},2,1,[]),
	Constraint={[add_neuron,add_layer_neuron],[{af,none},{plast,none}]},
	GenoM=genotype_mutator:mutate(Geno,6,Constraint),
	io:fwrite("~p~n",[GenoM]);
main(["fit"]) ->
	%Dataset="test.csv",
	Dataset="/usr/local/lib/python3.7/site-packages/sklearn/datasets/data/iris.csv",
	%Dataset="breast_cancer.csv",
	%Dataset="boston_house_prices.csv",
	{ok,Pid}=classification:start(Dataset,fun csv:read/1),
	%{ok,Pid}=regression:start(Dataset,fun csv:read/1),
	%Info=regression:extract_info(Pid),
	Info=classification:extract_info(Pid),
	io:fwrite("INFO: ~p~n",[Info]),
	#{mins:=Mins,maxs:=Maxs,avgs:=Avgs,stds:=Stds,num_features:=FeatNum,num_classes:=Classes,len:=Len,encoding:=Enc}=Info,
	%#{mins:=Mins,maxs:=Maxs,avgs:=Avgs,stds:=Stds,num_features:=FeatNum,len:=Len}=Info,
	SensorSpec={FeatNum,[{preprocess,standardization_global,[Avgs,Stds]}],[{preprocess,standardization_global,[Avgs,Stds]}]},
	ActuatorSpec={Classes,[{preprocess,softmax,[]}],[{preprocess,softmax,[]},{preprocess,mostLikely,[]},{preprocess,decode,[Enc]}]},
	%ActuatorSpec={1,[],[]},
	%regression:set_limit(Pid,Len*80/100),
	classification:set_limit(Pid,Len*85/100),
	nn:new(contr,Pid,{ffnn,sigmund,none},{SensorSpec,ActuatorSpec,[4]}),
	%io:fwrite("FITNESS: ~p~n",[nn:fit(contr,#{type=>shc,cycleShc=>300,stepnessNeuron=>40,stepnessWeight=>40,tgFit=>0.80},sync)]),
	Constraint={none,[{af,[sigmund]},{plast,none}]},
	io:fwrite("FITNESS: ~p~n",[nn:fit(contr,#{type=>eshc,mutations=>2,stepnessNeuron=>50,stepnessWeight=>50,constraint=>Constraint,cycleEshc=>10,cycleShc=>100,tgFit=>0.80},sync)]),
	%nn:fit(contr,#{type=>ashc,constraint=>{ffnn,sigmund,none},stepnessNeuron=>40,stepnessWeight=>40,cycleShc=>100,tgFit=>0.90,cycleAshc=>10},sync),
	%population:new(pop,1,{scape,init,[]},{ffnn,rectifier,hebbian},{2,1,[]}),
	%population:evolve(pop,20,Constraint,100,0.95).
	nn:fit_predict(contr).

